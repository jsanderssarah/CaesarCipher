
public class BreakingCaesarCipher {
   public String decryption(String encrypted){
        CaesarCipher cc = new CaesarCipher();
        int[] vals = countLetters(encrypted);
        int maxiIndex = maxIndex(vals);
        int dkey = maxiIndex-4;
        if(maxiIndex<4){
          dkey = 26-(4-maxiIndex);
        }
        return cc.encrypt(encrypted,26-dkey);
    }
    
    public int maxIndex(int[] vals){
        int maxiIndex = 0;
        for(int i=0; i<vals.length; i++){
            if(vals[i]>vals[maxiIndex]){
              maxiIndex=i;
            }
        }
        return maxiIndex;
    }
    
    public int[] countLetters(String message){
        String alph="abcdefghijklmnopqrstuvwxyz";
        int[] counts = new int[26];
        for(int i=0;i<message.length();i++){
            char ch = Character.toLowerCase(message.charAt(i));
            int index = alph.indexOf(ch);
            if(index!=-1){
              counts[index] +=1;
            }
        }
        return counts;
    }
    
    /*public void testCoutnLetters(){
    FileResource fr = new FileResource();
    
    String message = fr..asString();
    int count =
    }
    */
    
    
    public int [] countWordLengths(FileResource resource, int [] counts) {
        for (String word: resource.words()) {
            int n = word.length();
            int len = 0;
            for (int i = 0; i < n; i++) {
              if (Character.isLetter(word.charAt(i))) len += 1;
            }
            if (len <= counts.length & len != 0) counts[len-1] += 1;
            else System.out.println("The length of ARRAY counts is not enough!");
            }
        return counts;
    }
    
    public void testcountWordLengths() {
        FileResource resource = new FileResource();
        int [] counts = new int[31];
        int [] result = countWordLengths(resource, counts);
        for (int i = 0; i < 31; i++) {
          System.out.println(result[i] + " words of length "+ (i+1));
        }
        int maxlength = indexofMax(result);
        System.out.println("The most common word length in the file is "+maxlength);
    }
    
    
    // Write a method indexOfMax that has one parameter named values that is an integer array.
    // This method returns the index position of the largest element in values.
    // Then add code to the method testCountWordLengths to call indexOfMax to determine the
    //most common word length in the file.
    
    public int indexofMax(int [] values) {
        int maxvalue = 0;
        int position = 0;
        for (int i = 0; i < values.length; i++) {
            if (maxvalue == 0) maxvalue = values[i];
            else {
              if (maxvalue < values[i]) {
            
                maxvalue = values[i];
                 position = i;
              }
            }
        }
        return position+1;
    }
    public void testDecryption(){
        String decryptedMessage = decryption("Top ncmy qkff vi vguv vbg ycpx");
        System.out.println("MESSAGE IS "+decryptedMessage);
    }
    
    public String halfOfString(String message, int start){
        StringBuilder newMessage = new StringBuilder("");
        for(int i=start; i<message.length(); i=(i+2)){
          newMessage.append(message.charAt(i));
        
        }
        return newMessage.toString();
    }
    public void testHalfOfString(){
      halfOfString("Qbkm Zgis",1);
    }
    
    public int getKey(String s){
        int[] freq = countLetters(s);
        int maxIndex = maxIndex(freq);
        return maxIndex;
    }
    
    public String decryptTwoKeys(String encrypted){
        CaesarCipher cc =new CaesarCipher();
        String half0 = halfOfString(encrypted,0);
        String half1 = halfOfString(encrypted,1);
        int maxIndex0 = getKey(half0);
        int maxIndex1 = getKey(half1);
        int dkey0 = maxIndex0-4;
        int dkey1 = maxIndex1-4;
        if(maxIndex0<4){
          dkey0 = 26-(4-maxIndex0);
        }
        
        if(maxIndex1<4){
          dkey1 = 26-(4-maxIndex1);
        }
        System.out.println("key for half starting 0 is "+dkey0);
        System.out.println("key for half starting 1 is "+dkey1);
        return cc.encryptTwoKeys(encrypted,26-dkey0,26-dkey1);
    }
    public void testDecryptTwoKeys(){
        //FileResource fr = new FileResource();
        //String message = fr.asString();
        String message = "Aal uttx hm aal Qtct Fhljha pl Wbdl. Pvxvxlx!";
        String decrypted = decryptTwoKeys(message);
        System.out.println(decrypted);
    }
}
